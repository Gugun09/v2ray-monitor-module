name: üöÄ Simple Release V2Ray Monitor Module

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.6)'
        required: true
        default: 'v1.0.6'

env:
  MODULE_NAME: v2ray_monitor
  RELEASE_NAME: v2ray-monitor-module

jobs:
  release:
    name: üéâ Build and Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üè∑Ô∏è Extract Version Information
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          
          VERSION_CLEAN=${VERSION#v}
          VERSION_CODE=$(echo $VERSION_CLEAN | sed 's/\.//g')
          
          echo "version=$VERSION_CLEAN" >> $GITHUB_OUTPUT
          echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT
          echo "tag=$VERSION" >> $GITHUB_OUTPUT

      - name: üìù Generate Release Notes
        id: release_notes
        run: |
          if [[ -f "CHANGELOG.md" ]]; then
            NOTES=$(awk '/^## \['"${{ steps.version.outputs.version }}"'\]/{flag=1; next} /^## \[/{flag=0} flag' CHANGELOG.md)
            
            if [[ -z "$NOTES" ]]; then
              NOTES="### Release ${{ steps.version.outputs.version }}\n\n- Bug fixes and improvements"
            fi
          else
            NOTES="Release ${{ steps.version.outputs.version }}"
          fi
          
          {
            echo 'notes<<EOF'
            echo -e "$NOTES"
            echo 'EOF'
          } >> $GITHUB_OUTPUT

      - name: üîß Update Module Properties
        run: |
          # Update module.prop
          sed -i "s/^version=.*/version=${{ steps.version.outputs.version }}/" module.prop
          sed -i "s/^versionCode=.*/versionCode=${{ steps.version.outputs.version_code }}/" module.prop
          
          # Update get_version.sh
          sed -i "s/\"appVersion\": \"[^\"]*\"/\"appVersion\": \"${{ steps.version.outputs.version }}\"/" ui/www/cgi-bin/get_version.sh
          
          # Update customize.sh
          sed -i "s/v[0-9]\+\.[0-9]\+\.[0-9]\+/v${{ steps.version.outputs.version }}/g" customize.sh
          
          # Create update.json
          cat > update.json <<EOF
          {
            "version": "${{ steps.version.outputs.version }}",
            "versionCode": ${{ steps.version.outputs.version_code }},
            "zipUrl": "https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.tag }}/${{ env.RELEASE_NAME }}.zip",
            "changelog": "https://github.com/${{ github.repository }}/raw/main/CHANGELOG.md",
            "supportUrl": "https://github.com/${{ github.repository }}"
          }
          EOF

      - name: üóúÔ∏è Create Module Package
        run: |
          mkdir -p build
          
          # Copy all necessary files
          cp -r \
            module.prop \
            service.sh \
            customize.sh \
            uninstall.sh \
            system/ \
            ui/ \
            .env-example \
            README.md \
            CHANGELOG.md \
            update.json \
            build/
          
          # Create ZIP package
          cd build
          zip -r "../${{ env.RELEASE_NAME }}.zip" . -x "*.git*" "*.github*"
          cd ..
          
          # Get package info
          PACKAGE_SIZE=$(du -h "${{ env.RELEASE_NAME }}.zip" | cut -f1)
          echo "üì¶ Package size: $PACKAGE_SIZE"

      - name: üîç Validate Package
        run: |
          # Test ZIP integrity
          if ! unzip -t "${{ env.RELEASE_NAME }}.zip" >/dev/null 2>&1; then
            echo "‚ùå Package validation failed"
            exit 1
          fi
          
          # Check required files
          mkdir -p validate
          unzip -q "${{ env.RELEASE_NAME }}.zip" -d validate/
          
          REQUIRED_FILES=(
            "module.prop"
            "service.sh"
            "system/xbin/v2ray_monitor.sh"
            "ui/www/index.html"
          )
          
          for file in "${REQUIRED_FILES[@]}"; do
            if [[ ! -f "validate/$file" ]]; then
              echo "‚ùå Missing required file: $file"
              exit 1
            fi
          done
          
          rm -rf validate
          echo "‚úÖ Package validation passed"

      - name: üéØ Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: "V2Ray Monitor v${{ steps.version.outputs.version }}"
          body: |
            # üöÄ V2Ray Monitor Module ${{ steps.version.outputs.version }}
            
            ${{ steps.release_notes.outputs.notes }}
            
            ## üì• Installation
            1. Download the ZIP file below
            2. Install via Magisk Manager
            3. Reboot your device
            4. Access web UI at `http://localhost:9091`
            
            ## ‚ú® Features
            - üîÑ Automatic V2Ray monitoring and restart
            - üåê Web-based dashboard
            - üì± Telegram notifications
            - ‚òÅÔ∏è Cloudflare Tunnel support
            - üîå USB tethering control
            
            ## üîó Links
            - üìö [Documentation](https://github.com/${{ github.repository }}/blob/main/README.md)
            - üêõ [Report Issues](https://github.com/${{ github.repository }}/issues)
            - üí¨ [Discussions](https://github.com/${{ github.repository }}/discussions)
            
            ---
            
            **Download**: [${{ env.RELEASE_NAME }}.zip](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.tag }}/${{ env.RELEASE_NAME }}.zip)
          files: ${{ env.RELEASE_NAME }}.zip
          draft: false
          prerelease: false

      - name: üìä Release Summary
        run: |
          echo "## üéâ Release Created Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Item | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| üè∑Ô∏è Version | ${{ steps.version.outputs.version }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üì¶ Package | ${{ env.RELEASE_NAME }}.zip |" >> $GITHUB_STEP_SUMMARY
          echo "| üîó Release | [View Release](https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.tag }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| üì• Download | [Download ZIP](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.tag }}/${{ env.RELEASE_NAME }}.zip) |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üéØ Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. ‚úÖ Release is now available for download" >> $GITHUB_STEP_SUMMARY
          echo "2. üì¢ Announce the release to users" >> $GITHUB_STEP_SUMMARY
          echo "3. üìù Update documentation if needed" >> $GITHUB_STEP_SUMMARY
