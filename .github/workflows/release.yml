name: üöÄ Build and Release V2Ray Monitor Module

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.4)'
        required: true
        default: 'v1.0.4'
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

env:
  MODULE_NAME: v2ray_monitor
  RELEASE_NAME: v2ray-monitor-module

jobs:
  build:
    name: üî® Build Module Package
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      version_code: ${{ steps.version.outputs.version_code }}
      tag: ${{ steps.version.outputs.tag }}
      release_notes: ${{ steps.release_notes.outputs.notes }}
      package_size: ${{ steps.package.outputs.size }}
      
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üè∑Ô∏è Extract Version Information
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          
          VERSION_CLEAN=${VERSION#v}
          VERSION_CODE=$(echo $VERSION_CLEAN | sed 's/\.//g')
          
          echo "version=$VERSION_CLEAN" >> $GITHUB_OUTPUT
          echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT
          echo "tag=$VERSION" >> $GITHUB_OUTPUT

      - name: üìù Generate Release Notes
        id: release_notes
        run: |
          if [[ -f "CHANGELOG.md" ]]; then
            NOTES=$(awk '/^## \['"${{ steps.version.outputs.version }}"'\]/{flag=1; next} /^## \[/{flag=0} flag' CHANGELOG.md)
            
            if [[ -z "$NOTES" ]]; then
              NOTES="### Release ${{ steps.version.outputs.version }}\n\n- Bug fixes\n- Improvements"
            fi
          else
            NOTES="Release ${{ steps.version.outputs.version }}"
          fi
          
          {
            echo 'notes<<EOF'
            echo -e "$NOTES"
            echo 'EOF'
          } >> $GITHUB_OUTPUT

      - name: üîß Update Module Properties
        run: |
          sed -i "s/^version=.*/version=${{ steps.version.outputs.version }}/" module.prop
          sed -i "s/^versionCode=.*/versionCode=${{ steps.version.outputs.version_code }}/" module.prop
          
          cat > update.json <<EOF
          {
            "version": "${{ steps.version.outputs.version }}",
            "versionCode": ${{ steps.version.outputs.version_code }},
            "zipUrl": "https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.tag }}/${{ env.RELEASE_NAME }}.zip",
            "changelog": "https://github.com/${{ github.repository }}/raw/main/CHANGELOG.md"
          }
          EOF

      - name: üóúÔ∏è Create Module Package
        id: package
        run: |
          mkdir -p build
          cp -r module.prop service.sh customize.sh uninstall.sh system/ ui/ .env-example README.md CHANGELOG.md update.json build/
          cd build
          zip -r "../${{ env.RELEASE_NAME }}.zip" . -x "*.git*" "*.github*"
          cd ..
          PACKAGE_SIZE=$(du -h "${{ env.RELEASE_NAME }}.zip" | cut -f1)
          echo "size=$PACKAGE_SIZE" >> $GITHUB_OUTPUT

      - name: üîç Validate Package Structure
        run: |
          mkdir -p validate
          unzip -q "${{ env.RELEASE_NAME }}.zip" -d validate/
          
          REQUIRED_FILES=(
            "module.prop"
            "service.sh"
            "system/xbin/v2ray_monitor.sh"
          )
          
          for file in "${REQUIRED_FILES[@]}"; do
            if [[ ! -f "validate/$file" ]]; then
              echo "::error::Missing required file: $file"
              exit 1
            fi
          done
          rm -rf validate

      - name: üì§ Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.RELEASE_NAME }}-${{ steps.version.outputs.version }}
          path: ${{ env.RELEASE_NAME }}.zip

  release:
    name: üéâ Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üì• Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.RELEASE_NAME }}-${{ needs.build.outputs.version }}

      - name: üéØ Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.build.outputs.tag }}
          name: "V2Ray Monitor v${{ needs.build.outputs.version }}"
          body: |
            # V2Ray Monitor Module ${{ needs.build.outputs.version }}
            
            ${{ needs.build.outputs.release_notes }}
            
            ## Installation
            1. Download the ZIP file
            2. Install via Magisk
            3. Reboot device
            
            ## Features
            - V2Ray monitoring
            - Web dashboard
            - Notifications
            
            **Download**: [${{ env.RELEASE_NAME }}.zip](https://github.com/${{ github.repository }}/releases/download/${{ needs.build.outputs.tag }}/${{ env.RELEASE_NAME }}.zip)
          files: ${{ env.RELEASE_NAME }}.zip
          draft: false
          prerelease: ${{ github.event.inputs.prerelease }}

  notify:
    name: üì¢ Post-Release Notifications
    needs: [build, release]
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - name: üîÑ Update Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: üíæ Commit Version Updates
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add module.prop update.json
          git commit -m "Update version to ${{ needs.build.outputs.version }}" || echo "No changes to commit"
          git push
